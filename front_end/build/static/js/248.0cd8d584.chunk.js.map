{"version":3,"file":"static/js/248.0cd8d584.chunk.js","mappings":"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","sources":["FC/shared/components/FormElements/ImageUpload.tsx","FC/shared/components/FormElements/Input.tsx","FC/shared/components/UIElements/Card.tsx","FC/user/pages/Auth.tsx","hooks/form-hook.tsx","util/validators.tsx","hooks/useReducer.tsx","typing/enums.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Button } from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nexport const ImageUpload = ({\r\n  id,\r\n  center = false,\r\n  onInput,\r\n  errorText,\r\n}: {\r\n  id: string;\r\n  center?: boolean;\r\n  onInput: Function;\r\n  errorText: string;\r\n}) => {\r\n  const ALLOWED_FILES = \".jpg,.png,.jpeg\";\r\n\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [previewUrl, setPreviewUrl] = useState<string | ArrayBuffer | null>(\r\n    null\r\n  );\r\n  const [isValid, setIsValid] = useState(true);\r\n  const filePickerRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let pickedFile: File | null = null;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    onInput(id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current!.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept={ALLOWED_FILES}\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl as string} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n","import { ChangeEvent, useEffect, useReducer } from \"react\";\r\nimport { inputReducer } from \"../../../../hooks/useReducer\";\r\nimport { EReducerActionType, EValidatorType } from \"../../../../typing/enums\";\r\nimport { reducerInputState } from \"../../../../typing/types\";\r\n\r\nimport \"./Input.css\";\r\n\r\nexport function Input({\r\n  id,\r\n  label,\r\n  element,\r\n  type,\r\n  placeHolder,\r\n  rows,\r\n  validators,\r\n  errorText,\r\n  onInput,\r\n  initValue,\r\n  initialIsValid,\r\n}: {\r\n  id?: string;\r\n  label?: string;\r\n  element?: string;\r\n  type?: string;\r\n  placeHolder?: string;\r\n  rows?: number;\r\n  validators: EValidatorType[];\r\n  errorText: string;\r\n  onInput: Function;\r\n  initValue?: string;\r\n  initialIsValid?: boolean;\r\n}) {\r\n  const reducerInputStateInitVal: reducerInputState = {\r\n    value: initValue || \"\",\r\n    isTouched: false,\r\n    isValid: initialIsValid || false,\r\n  };\r\n  const [inputState, dispatch] = useReducer(\r\n    inputReducer,\r\n    reducerInputStateInitVal\r\n  );\r\n\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (\r\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const action = {\r\n      val: event.target.value,\r\n      type: EReducerActionType.CHNAGE,\r\n      validators: validators,\r\n    };\r\n    dispatch(action);\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    const action = {\r\n      val: inputState.value,\r\n      type: EReducerActionType.TOUCH,\r\n      validators: validators,\r\n    };\r\n\r\n    dispatch(action);\r\n  };\r\n\r\n  const currElement =\r\n    element === \"input\" ? (\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        placeholder={placeHolder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value as string}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={id}\r\n        rows={rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value as string}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={id}>{label}</label>\r\n      {currElement}\r\n      {!inputState.isValid && inputState.isTouched && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = ({\n  className,\n  style,\n  children,\n}: {\n  className?: String;\n  style?: React.CSSProperties;\n  children: JSX.Element | JSX.Element[];\n}) => {\n  return (\n    <div className={`card ${className}`} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useContext, useState } from \"react\";\r\nimport { AuthContext } from \"../../../hooks/auth-context\";\r\nimport { useForm } from \"../../../hooks/form-hook\";\r\nimport { reducerInputStateInitVal } from \"../../../hooks/useReducer\";\r\nimport { EValidatorType } from \"../../../typing/enums\";\r\nimport { reducerInputState, userWToken } from \"../../../typing/types\";\r\nimport {\r\n  DEFAULT_HEADERS,\r\n  ERROR_DESCRIPTION_LENGTH,\r\n  ERROR_IMAGE,\r\n  ERROR_TEXT_REQUIRED,\r\n  ERROR_VALID_EMAIL,\r\n  ENDPOINT_LOGIN,\r\n  ENDPOINT_SIGNUP,\r\n} from \"../../../util/Constants\";\r\nimport { Button } from \"../../shared/components/FormElements/Button\";\r\nimport { Input } from \"../../shared/components/FormElements/Input\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { IUser } from \"../../../typing/interfaces\";\r\n\r\nimport \"./Auth.css\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { ErrorModal } from \"../../shared/components/UIElements/ErrorModal\";\r\nimport { useHttpClient } from \"../../../hooks/http-hook\";\r\nimport { ImageUpload } from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\n/* ************************************************************************************************** */\r\n\r\nfunction Auth() {\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const ctx = useContext(AuthContext);\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: reducerInputStateInitVal,\r\n      password: reducerInputStateInitVal,\r\n    },\r\n    false\r\n  );\r\n\r\n  /* ************************************************************************************************** */\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      formState.inputs.email = formState.inputs.email as reducerInputState;\r\n      formState.inputs.password = formState.inputs\r\n        .password as reducerInputState;\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: reducerInputStateInitVal,\r\n          image: reducerInputStateInitVal,\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    let res: userWToken | undefined;\r\n    let user: IUser = {\r\n      email: formState.inputs.email!.value,\r\n      password: formState.inputs.password!.value,\r\n    };\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        res = await sendRequest(\r\n          ENDPOINT_LOGIN,\r\n          \"POST\",\r\n          JSON.stringify(user),\r\n          DEFAULT_HEADERS\r\n        );\r\n\r\n        ctx.login(res!);\r\n      } catch (err) {}\r\n    } else {\r\n      user = {\r\n        ...user,\r\n        name: formState.inputs.name!.value,\r\n        image: formState.inputs.image!.value,\r\n      };\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", user.email);\r\n        formData.append(\"name\", user.name!);\r\n        formData.append(\"password\", user.password!);\r\n        formData.append(\"image\", user.image!);\r\n\r\n        res = await sendRequest(ENDPOINT_SIGNUP, \"POST\", formData);\r\n\r\n        ctx.login(res!);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  /* ************************************************************************************************** */\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        <>{isLoading && <LoadingSpinner asOverlay />}</>\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[EValidatorType.REQUIRE]}\r\n              errorText={ERROR_TEXT_REQUIRED}\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText={ERROR_IMAGE}\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[EValidatorType.EMAIL]}\r\n            errorText={ERROR_VALID_EMAIL}\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[EValidatorType.MINLENGTH]}\r\n            errorText={ERROR_DESCRIPTION_LENGTH}\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          {`SWITCH TO ${isLoginMode ? \"SIGNUP\" : \"LOGIN\"}`}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","import { useReducer, useCallback } from \"react\";\r\nimport { EReducerActionType } from \"../typing/enums\";\r\nimport { reducerFormAction, reducerFormState } from \"../typing/types\";\r\nimport { formReducer } from \"./useReducer\";\r\n\r\nexport const useForm = (\r\n  initialInputs: reducerFormState[\"inputs\"],\r\n  initialIsValid: reducerFormState[\"isValid\"]\r\n): [\r\n  reducerFormState,\r\n  (id: string, value: string, isValid: boolean) => void,\r\n  (\r\n    formInputs: reducerFormState[\"inputs\"],\r\n    formIsValid: reducerFormState[\"isValid\"]\r\n  ) => void\r\n] => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialIsValid,\r\n  });\r\n\r\n  const inputHandler = useCallback(\r\n    (id: string, value: string, isValid: boolean) => {\r\n      const action: reducerFormAction = {\r\n        type: EReducerActionType.CHNAGE,\r\n        input: {\r\n          value: value,\r\n          isValid: isValid,\r\n        },\r\n        inputId: id,\r\n      };\r\n      dispatch(action);\r\n    },\r\n    []\r\n  );\r\n\r\n  const setFormData = useCallback(\r\n    (\r\n      formInputs: reducerFormState[\"inputs\"],\r\n      formIsValid: reducerFormState[\"isValid\"]\r\n    ) => {\r\n      const inputs = { inputs: formInputs, isValid: formIsValid };\r\n      const action: reducerFormAction = {\r\n        type: EReducerActionType.SET,\r\n        input: inputs,\r\n      };\r\n      dispatch(action);\r\n    },\r\n    []\r\n  );\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","import { EValidatorType } from \"../typing/enums\";\r\nimport { MINLENGTH, MAXLENGTH, MIN, MAX } from \"./Constants\";\r\n\r\nexport const VALIDATE = (\r\n  value: string | number | File,\r\n  validators: EValidatorType[]\r\n) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator === EValidatorType.REQUIRE) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator === EValidatorType.MINLENGTH) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length >= MINLENGTH;\r\n    }\r\n    if (validator === EValidatorType.MAXLENGTH) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length <= MAXLENGTH;\r\n    }\r\n    if (validator === EValidatorType.MIN) {\r\n      isValid = isValid && +value >= MIN;\r\n    }\r\n    if (validator === EValidatorType.MAX) {\r\n      isValid = isValid && +value <= MAX;\r\n    }\r\n    if (validator === EValidatorType.EMAIL) {\r\n      value = value as string;\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n    if (validator === EValidatorType.FILE) {\r\n      value = value as File;\r\n      isValid = isValid && !!value.name.match(/\\.(jpg|jpeg|png|gif)$/);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import { EReducerActionType, EValidatorType } from \"../typing/enums\";\r\nimport {\r\n  reducerInputAction,\r\n  reducerFormState,\r\n  reducerInputState,\r\n  reducerFormAction,\r\n} from \"../typing/types\";\r\nimport { VALIDATE } from \"../util/validators\";\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport const reducerInputStateInitVal: reducerInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n  isValid: false,\r\n};\r\n\r\nexport const inputReducer = (\r\n  state: reducerInputState,\r\n  action: reducerInputAction\r\n) => {\r\n  switch (action.type) {\r\n    case EReducerActionType.CHNAGE: {\r\n      let newVal = action.val;\r\n      return {\r\n        ...state,\r\n        value: newVal,\r\n        isValid: VALIDATE(newVal, action.validators as EValidatorType[]),\r\n      };\r\n    }\r\n    case EReducerActionType.TOUCH: {\r\n      return { ...state, isTouched: true };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport const reducerFormStateInitVal: reducerFormState = {\r\n  inputs: {\r\n    name: reducerInputStateInitVal,\r\n    quantity: reducerInputStateInitVal,\r\n    image: reducerInputStateInitVal,\r\n  },\r\n  isValid: false,\r\n};\r\n\r\nexport const formReducer = (\r\n  state: reducerFormState,\r\n  action: reducerFormAction\r\n) => {\r\n  switch (action.type) {\r\n    case EReducerActionType.CHNAGE: {\r\n      action.input = action.input as reducerInputState;\r\n      let formIsVlaid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsVlaid = formIsVlaid && action.input.isValid;\r\n        } else {\r\n          formIsVlaid =\r\n            formIsVlaid && (state.inputs[inputId] as reducerInputState).isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId as string]: {\r\n            value: action.input.value,\r\n            isValid: action.input.isValid,\r\n          },\r\n        },\r\n        isValid: formIsVlaid,\r\n      };\r\n    }\r\n    case EReducerActionType.SET: {\r\n      action.input = action.input as reducerFormState;\r\n      return { inputs: action.input.inputs, isValid: action.input.isValid };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","export enum EValidatorType {\r\n  REQUIRE,\r\n  MINLENGTH,\r\n  MAXLENGTH,\r\n  MIN,\r\n  MAX,\r\n  EMAIL,\r\n  FILE,\r\n}\r\n\r\nexport enum EReducerActionType {\r\n  CHNAGE,\r\n  TOUCH,\r\n  SET,\r\n}\r\n\r\nexport enum HTTP_RESPONSE_STATUS {\r\n  OK = 200,\r\n  Created = 201,\r\n  Accepted = 202,\r\n  No_Content = 204,\r\n  Bad_Request = 400,\r\n  Unauthorized = 401,\r\n  Not_Found = 404,\r\n  Internal_Server_Error = 500,\r\n  Unprocessable_Entity = 422,\r\n}\r\n"],"names":["ImageUpload","id","center","onInput","errorText","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","src","alt","Button","onClick","current","click","Input","label","element","placeHolder","rows","validators","reducerInputStateInitVal","value","initValue","isTouched","initialIsValid","useReducer","inputReducer","inputState","dispatch","changeHandler","action","val","EReducerActionType","touchHandler","currElement","placeholder","onBlur","htmlFor","children","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","ctx","useContext","AuthContext","useForm","email","password","formState","inputHandler","setFormData","authSubmitHandler","preventDefault","user","inputs","ENDPOINT_LOGIN","JSON","stringify","DEFAULT_HEADERS","res","login","name","image","formData","FormData","append","ENDPOINT_SIGNUP","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","I","EValidatorType","ERROR_TEXT_REQUIRED","ERROR_IMAGE","ERROR_VALID_EMAIL","ERROR_DESCRIPTION_LENGTH","disabled","inverse","undefined","prevMode","initialInputs","formReducer","useCallback","input","inputId","formInputs","formIsValid","VALIDATE","validator","trim","MINLENGTH","MAXLENGTH","MIN","MAX","test","match","state","newVal","reducerFormStateInitVal","quantity","formIsVlaid","HTTP_RESPONSE_STATUS"],"sourceRoot":""}