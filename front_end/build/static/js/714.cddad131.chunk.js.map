{"version":3,"file":"static/js/714.cddad131.chunk.js","mappings":"gKAwBA,EApBe,SAAH,GAYL,IAXLA,EAAK,EAALA,MACAC,EAAG,EAAHA,IACAC,EAAK,EAALA,MACAC,EAAS,EAATA,UACAC,EAAK,EAALA,MAQA,OACE,gBAAKD,UAAS,iBAAYA,GAAaC,MAAOA,EAAM,UAClD,gBAAKC,IAAKL,EAAOC,IAAKA,EAAKG,MAAO,CAAEF,MAAOA,EAAOI,OAAQJ,MAGhE,C,2ECFA,EAhBa,SAAH,GAQH,IAPLC,EAAS,EAATA,UACAC,EAAK,EAALA,MACAG,EAAQ,EAARA,SAMA,OACE,gBAAKJ,UAAS,eAAUA,GAAaC,MAAOA,EAAM,SAC/CG,GAGP,C,sOCFO,SAASC,EAAU,GAMtB,IALFC,EAAK,EAALA,MACAC,EAAQ,EAARA,SAKMC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAAaF,KACrC,GAAsDG,EAAAA,EAAAA,KAAnCC,GAAF,EAATC,UAAgB,EAALD,OAAOE,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WACvC,GAAgDC,EAAAA,EAAAA,WAAS,GAAM,eAAxDC,EAAgB,KAAEC,EAAmB,KAQtCC,EAAsB,WAC1BD,GAAoB,EACtB,EAEME,EAAoB,yCAAG,mFACL,OAAtBD,IAAsB,kBAGdL,EAAYO,EAAAA,GAAkB,IAAMf,EAAMgB,IAAK,SAAU,KAAM,CACnEC,cAAe,UAAe,OAAJf,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,SAC/B,KAAD,EACFjB,EAASD,EAAMgB,KAAK,uGAEvB,kBATyB,mCAe1B,OAJAG,QAAQC,IAAQ,OAAJlB,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,UAKhB,UAAC,WAAc,YACb,SAACC,EAAA,EAAU,CAAChB,MAAOA,EAAOiB,QAASd,KACnC,SAACe,EAAA,EAAK,CACJC,KAAMd,EACNe,SAAUb,EACVc,OAAO,gBACPC,YAAY,sBACZC,QACE,UAAC,WAAc,YACb,SAACC,EAAA,EAAM,CAACC,SAAO,EAACC,QAASnB,EAAoB,SAAC,YAG9C,SAACiB,EAAA,EAAM,CAACG,QAAM,EAACD,QAASlB,EAAqB,SAAC,cAIjD,UAED,uBAAG,+CAEL,eAAIpB,UAAU,OAAM,UAClB,UAACwC,EAAA,EAAI,CAACxC,UAAU,0BAAyB,WACvC,gBAAKA,UAAU,cAAa,SACzBM,EAAMT,QACL,SAAC4C,EAAA,EAAM,CACL5C,MAAO6C,EAAAA,GAAcA,EAAAA,GAAcpC,EAAMT,MAAQ,GACjDC,IAAKQ,EAAMqC,KAAO,aAIxB,iBAAK3C,UAAU,aAAY,WACzB,wBAAKM,EAAMqC,QACX,wBAAKrC,EAAMsC,qBAcvB,CC3FO,SAASC,EAAW,GAMvB,IALFC,EAAM,EAANA,OACAC,EAAa,EAAbA,cAKA,OAAsB,IAAlBD,EAAOE,QAEP,gBAAKhD,UAAU,oBAAmB,UAChC,UAACwC,EAAA,EAAI,YACH,wBAAI,wCACJ,SAACJ,EAAA,EAAM,CAACa,GAAG,cAAa,SAAC,oBAM/B,eAAIjD,UAAU,aAAY,SACvB8C,EAAOI,KAAI,SAACC,GAAI,OACf,SAAC9C,EAAS,CAERC,MAAO6C,EACP5C,SAAUwC,GAFLI,EAAK7B,IAAK8B,WAGf,KAIV,CCUA,MApCA,WACE,OAAsDzC,EAAAA,EAAAA,KAA9CE,EAAS,EAATA,UAAWD,EAAK,EAALA,MAAOE,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WACvC,GAA4BC,EAAAA,EAAAA,UAAmB,IAAG,eAA3C8B,EAAM,KAAEO,EAAS,KAClBC,GAASC,EAAAA,EAAAA,MAAYD,OAoB3B,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,yCAAG,kHAEE3C,EAAYO,EAAAA,IAAiB,KAAD,EAAxCqC,EAAG,OAETL,EAAUK,EAAIZ,QAAQ,uGAEzB,kBANgB,mCAQjBW,GACF,GAAG,CAAC3C,EAAawC,KASf,UAAC,WAAc,YACb,SAAC1B,EAAA,EAAU,CAAChB,MAAOA,EAAOiB,QAASd,IAClCF,IACC,gBAAKb,UAAU,SAAQ,UACrB,SAAC2D,EAAA,EAAc,CAACC,WAAS,OAG7B,SAAC,EAAU,CAACd,OAAQA,EAAQC,cAdJ,SAACc,GAC3BR,GAAU,SAACS,GAAU,OACnBA,EAAWC,QAAO,SAACC,GAAC,OAAKA,EAAE1C,MAAQuC,CAAc,GAAC,GAEtD,MAaF,C","sources":["FC/shared/components/UIElements/Avatar.tsx","FC/shared/components/UIElements/Card.tsx","FC/stocks/components/StockItem.tsx","FC/stocks/components/StocksList.tsx","FC/stocks/pages/Stocks.tsx"],"sourcesContent":["import React from \"react\";\n\nimport \"./Avatar.css\";\n\nconst Avatar = ({\n  image,\n  alt,\n  width,\n  className,\n  style,\n}: {\n  image: string;\n  alt: string;\n  width?: number;\n  className?: string;\n  style?: React.CSSProperties;\n}) => {\n  return (\n    <div className={`avatar ${className}`} style={style}>\n      <img src={image} alt={alt} style={{ width: width, height: width }} />\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = ({\n  className,\n  style,\n  children,\n}: {\n  className?: String;\n  style?: React.CSSProperties;\n  children: JSX.Element | JSX.Element[];\n}) => {\n  return (\n    <div className={`card ${className}`} style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useContext, useState } from \"react\";\r\nimport { Button } from \"../../shared/components/FormElements/Button\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport { IStock } from \"../../../typing/interfaces\";\r\n\r\nimport \"../../user/components/Item.css\";\r\nimport { AuthContext } from \"../../../hooks/auth-context\";\r\nimport { useHttpClient } from \"../../../hooks/http-hook\";\r\nimport { ErrorModal } from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { BACKEND_URL, ENDPOINT_STOCKS } from \"../../../util/Constants\";\r\nimport Avatar from \"../../shared/components/UIElements/Avatar\";\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport function StockItem({\r\n  stock,\r\n  onDelete,\r\n}: {\r\n  stock: IStock;\r\n  onDelete: Function;\r\n}) {\r\n  const user = useContext(AuthContext).user;\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [isConfirmVisible, setIsConfirmVisible] = useState(false);\r\n\r\n  /* ************************************************************************************************** */\r\n\r\n  const openConfirmHandler = () => {\r\n    setIsConfirmVisible(true);\r\n  };\r\n\r\n  const closeConfirmHandler = () => {\r\n    setIsConfirmVisible(false);\r\n  };\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    closeConfirmHandler();\r\n\r\n    try {\r\n      await sendRequest(ENDPOINT_STOCKS + \"/\" + stock._id, \"DELETE\", null, {\r\n        Authorization: \"Barer \" + user?.token,\r\n      });\r\n      onDelete(stock._id);\r\n    } catch (err) {}\r\n  };\r\n\r\n  console.log(user?.isAdmin);\r\n\r\n  /* ************************************************************************************************** */\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Modal\r\n        show={isConfirmVisible}\r\n        onCancel={closeConfirmHandler}\r\n        header=\"Are you sure?\"\r\n        footerClass=\"item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={closeConfirmHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <p>Do you want to proceed and delete this!</p>\r\n      </Modal>\r\n      <li className=\"item\">\r\n        <Card className=\"item-card item__content\">\r\n          <div className=\"item__image\">\r\n            {stock.image && (\r\n              <Avatar\r\n                image={BACKEND_URL ? BACKEND_URL + stock.image : \"\"}\r\n                alt={stock.name + \"image\"}\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"item__info\">\r\n            <h2>{stock.name}</h2>\r\n            <h2>{stock.quantity}</h2>\r\n          </div>\r\n          {/* <div className=\"item__actions\">\r\n            {user && <Button to={`/stocks/${stock._id}`}>EDIT</Button>}\r\n            {user && user.isAdmin && (\r\n              <Button danger={true} onClick={openConfirmHandler}>\r\n                DELETE\r\n              </Button>\r\n            )}\r\n          </div> */}\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import Card from \"../../shared/components/UIElements/Card\";\r\nimport { IStock } from \"../../../typing/interfaces\";\r\nimport { StockItem } from \"./StockItem\";\r\n\r\nimport \"./StocksList.css\";\r\n\r\nimport { Button } from \"../../shared/components/FormElements/Button\";\r\n\r\nexport function StocksList({\r\n  stocks,\r\n  onDeletestock,\r\n}: {\r\n  stocks: IStock[];\r\n  onDeletestock: Function;\r\n}) {\r\n  if (stocks.length === 0) {\r\n    return (\r\n      <div className=\"stock-list center\">\r\n        <Card>\r\n          <h2>No stocks found. Maybe create one?</h2>\r\n          <Button to=\"/stocks/new\">Add STOCK</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <ul className=\"stock-list\">\r\n      {stocks.map((curr) => (\r\n        <StockItem\r\n          key={curr._id!.toString()}\r\n          stock={curr}\r\n          onDelete={onDeletestock}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useHttpClient } from \"../../../hooks/http-hook\";\r\nimport { IStock } from \"../../../typing/interfaces\";\r\nimport { ENDPOINT_STOCKS } from \"../../../util/Constants\";\r\nimport { ErrorModal } from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { StocksList } from \"../components/StocksList\";\r\n\r\nfunction Stocks() {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [stocks, setStocks] = useState<IStock[]>([]);\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchStocks = async () => {\r\n      try {\r\n        const res = await sendRequest(ENDPOINT_STOCKS);\r\n\r\n        setStocks(res.stocks);\r\n      } catch (err) {}\r\n    };\r\n\r\n    fetchStocks();\r\n  }, [sendRequest, userId]);\r\n\r\n  const stockDeletedHandler = (deletedstockId: string) => {\r\n    setStocks((prevstocks) =>\r\n      prevstocks.filter((p) => p._id !== deletedstockId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner asOverlay />\r\n        </div>\r\n      )}\r\n      <StocksList stocks={stocks} onDeletestock={stockDeletedHandler} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Stocks;\r\n"],"names":["image","alt","width","className","style","src","height","children","StockItem","stock","onDelete","user","useContext","AuthContext","useHttpClient","error","isLoading","sendRequest","clearError","useState","isConfirmVisible","setIsConfirmVisible","closeConfirmHandler","confirmDeleteHandler","ENDPOINT_STOCKS","_id","Authorization","token","console","log","isAdmin","ErrorModal","onClear","Modal","show","onCancel","header","footerClass","footer","Button","inverse","onClick","danger","Card","Avatar","BACKEND_URL","name","quantity","StocksList","stocks","onDeletestock","length","to","map","curr","toString","setStocks","userId","useParams","useEffect","fetchStocks","res","LoadingSpinner","asOverlay","deletedstockId","prevstocks","filter","p"],"sourceRoot":""}