{"version":3,"file":"static/js/191.e6bb262a.chunk.js","mappings":"qLAKaA,EAAc,SAAH,GAUjB,IATLC,EAAE,EAAFA,GAAG,EAAD,EACFC,OAAAA,OAAM,OAAQ,EACdC,EAAO,EAAPA,QACAC,EAAS,EAATA,UASA,GAAwBC,EAAAA,EAAAA,UAAsB,MAAK,eAA5CC,EAAI,KAAEC,EAAO,KACpB,GAAoCF,EAAAA,EAAAA,UAClC,MACD,eAFMG,EAAU,KAAEC,EAAa,KAGhC,GAA8BJ,EAAAA,EAAAA,WAAS,GAAK,eAArCK,EAAO,KAAEC,EAAU,KACpBC,GAAgBC,EAAAA,EAAAA,QAAgC,OAEtDC,EAAAA,EAAAA,YAAU,WACR,GAAKR,EAAL,CAGA,IAAMS,EAAa,IAAIC,WACvBD,EAAWE,OAAS,WAClBR,EAAcM,EAAWG,OAC3B,EACAH,EAAWI,cAAcb,EALzB,CAMF,GAAG,CAACA,IAqBJ,OACE,iBAAKc,UAAU,eAAc,WAC3B,kBACEnB,GAAIA,EACJoB,IAAKT,EACLU,MAAO,CAAEC,QAAS,QAClBC,KAAK,OACLC,OA9CgB,kBA+ChBC,SA3BgB,SAACC,GACrB,IAAIC,EAA0B,KAC1BC,EAAcnB,EACdiB,EAAMG,OAAOC,OAAuC,IAA9BJ,EAAMG,OAAOC,MAAMC,QAC3CJ,EAAaD,EAAMG,OAAOC,MAAM,GAChCxB,EAAQqB,GACRjB,GAAW,GACXkB,GAAc,IAEdlB,GAAW,GACXkB,GAAc,GAEhB1B,EAAQF,EAAI2B,EAAYC,EAC1B,KAgBI,iBAAKT,UAAS,uBAAkBlB,GAAU,UAAW,WACnD,iBAAKkB,UAAU,wBAAuB,UACnCZ,IAAc,gBAAKyB,IAAKzB,EAAsB0B,IAAI,aACjD1B,IAAc,uBAAG,8BAErB,SAAC2B,EAAA,EAAM,CAACX,KAAK,SAASY,QAnBH,WACvBxB,EAAcyB,QAASC,OACzB,EAiBsD,SAAC,mBAIjD5B,IAAW,uBAAIN,MAGvB,C,4GCtEO,SAASmC,EAAM,GAwBlB,IAvBFtC,EAAE,EAAFA,GACAuC,EAAK,EAALA,MACAC,EAAO,EAAPA,QACAjB,EAAI,EAAJA,KACAkB,EAAW,EAAXA,YACAC,EAAI,EAAJA,KACAC,EAAU,EAAVA,WACAxC,EAAS,EAATA,UACAD,EAAO,EAAPA,QAgBM0C,EAA8C,CAClDC,MAhBO,EAATC,WAgBsB,GACpBC,WAAW,EACXtC,QAjBY,EAAduC,iBAiB6B,GAE7B,GAA+BC,EAAAA,EAAAA,YAC7BC,EAAAA,GACAN,GACD,eAHMO,EAAU,KAAEC,EAAQ,KAKnBP,EAAmBM,EAAnBN,MAAOpC,EAAY0C,EAAZ1C,SAEfI,EAAAA,EAAAA,YAAU,WACRX,EAAQF,EAAI6C,EAAOpC,EACrB,GAAG,CAACT,EAAI6C,EAAOpC,EAASP,IAExB,IAAMmD,EAAgB,SACpB3B,GAEA,IAAM4B,EAAS,CACbC,IAAK7B,EAAMG,OAAOgB,MAClBtB,KAAMiC,EAAAA,GAAAA,OACNb,WAAYA,GAEdS,EAASE,EACX,EAEMG,EAAe,WACnB,IAAMH,EAAS,CACbC,IAAKJ,EAAWN,MAChBtB,KAAMiC,EAAAA,GAAAA,MACNb,WAAYA,GAGdS,EAASE,EACX,EAEMI,EACQ,UAAZlB,GACE,kBACExC,GAAIA,EACJuB,KAAMA,EACNoC,YAAalB,EACbhB,SAAU4B,EACVO,OAAQH,EACRZ,MAAOM,EAAWN,SAGpB,qBACE7C,GAAIA,EACJ0C,KAAMA,GAAQ,EACdjB,SAAU4B,EACVO,OAAQH,EACRZ,MAAOM,EAAWN,QAGxB,OACE,iBACE1B,UAAS,wBACNgC,EAAW1C,SAAW0C,EAAWJ,WAAa,yBAC9C,WAEH,kBAAOc,QAAS7D,EAAG,SAAEuC,IACpBmB,GACCP,EAAW1C,SAAW0C,EAAWJ,YAAa,uBAAI5C,MAG1D,C,gPCVA,MAnEA,WACE,OAAkC2D,EAAAA,EAAAA,GAChCC,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,SACD,eAHMC,EAAS,KAAEC,EAAY,KAIxBC,GAAMC,EAAAA,EAAAA,MAENC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAAaF,KAErC,GAAsDG,EAAAA,EAAAA,KAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEjCC,EAAa,yCAAG,WAAOlD,GAAsB,4EAC1B,GAAvBA,EAAMmD,iBAEDb,EAAU,CAAD,gDAO0C,OAHlDc,EAAW,IAAIC,UACZC,OAAO,OAAQhB,EAAUiB,OAAOC,KAAMrC,OAC/CiC,EAASE,OAAO,WAAYhB,EAAUiB,OAAOE,SAAUtC,OACvDiC,EAASE,OAAO,QAAShB,EAAUiB,OAAOG,MAAOvC,OAAO,mBAGhD6B,EAAYW,EAAAA,GAAiB,OAAQP,EAAU,CACnDQ,cAAe,SAAWlB,EAAKmB,QAC9B,KAAD,GAEFrB,EAAI,KAAK,4GAEZ,gBAnBkB,sCAqBnB,OACE,UAAC,WAAc,YACb,SAACsB,EAAA,EAAU,CAACf,MAAOA,EAAOgB,QAASd,KACnC,kBAAMxD,UAAU,aAAauE,SAAUd,EAAc,UAClDJ,IAAa,SAACmB,EAAA,EAAc,CAACC,WAAS,KACvC,SAACtD,EAAAuD,EAAK,CACJ7F,GAAG,OACHwC,QAAQ,QACRjB,KAAK,OACLgB,MAAM,OACNI,WAAY,CAACmD,EAAAA,GAAAA,SACb3F,UAAW4F,EAAAA,GACX7F,QAAS+D,KAEX,SAAC3B,EAAAuD,EAAK,CACJ7F,GAAG,WACHwC,QAAQ,QACRD,MAAM,WACNI,WAAY,CAACmD,EAAAA,GAAAA,IAAoBA,EAAAA,GAAAA,KACjC3F,UAAW6F,EAAAA,GACX9F,QAAS+D,KAEX,SAAClE,EAAA,EAAW,CACVC,GAAG,QACHE,QAAS+D,EACT9D,UAAW8F,EAAAA,MAEb,SAAC/D,EAAA,EAAM,CAACX,KAAK,SAAS2E,UAAWlC,EAAUvD,QAAQ,SAAC,mBAM5D,C,mGClFaqD,EAAU,SACrBqC,EACAnD,GASA,OAA8BC,EAAAA,EAAAA,YAAWmD,EAAAA,GAAa,CACpDnB,OAAQkB,EACR1F,QAASuC,IACT,eAHKgB,EAAS,KAAEZ,EAAQ,KAmC1B,MAAO,CAACY,GA9BaqC,EAAAA,EAAAA,cACnB,SAACrG,EAAY6C,EAAepC,GAC1B,IAAM6C,EAA4B,CAChC/B,KAAMiC,EAAAA,GAAAA,OACN8C,MAAO,CACLzD,MAAOA,EACPpC,QAASA,GAEX8F,QAASvG,GAEXoD,EAASE,EACX,GACA,KAGkB+C,EAAAA,EAAAA,cAClB,SACEG,EACAC,GAEA,IAAMxB,EAAS,CAAEA,OAAQuB,EAAY/F,QAASgG,GACxCnD,EAA4B,CAChC/B,KAAMiC,EAAAA,GAAAA,IACN8C,MAAOrB,GAET7B,EAASE,EACX,GACA,IAIJ,C,sLCjDaoD,EAAW,SACtB7D,EACAF,GAEA,IACkC,EAD9BlC,GAAU,EAAK,UACKkC,GAAU,IAAlC,2BAAoC,CAAC,IAA1BgE,EAAS,QACdA,IAAcb,EAAAA,GAAAA,UAEhBrF,EAAUA,GAAWoC,EAAM+D,OAAO7E,OAAS,GAEzC4E,IAAcb,EAAAA,GAAAA,YAEhBrF,EAAUA,GAAWoC,EAAM+D,OAAO7E,QAAU8E,EAAAA,IAE1CF,IAAcb,EAAAA,GAAAA,YAEhBrF,EAAUA,GAAWoC,EAAM+D,OAAO7E,QAAU+E,EAAAA,IAE1CH,IAAcb,EAAAA,GAAAA,MAChBrF,EAAUA,IAAYoC,GAASkE,EAAAA,IAE7BJ,IAAcb,EAAAA,GAAAA,MAChBrF,EAAUA,IAAYoC,GAASmE,EAAAA,IAE7BL,IAAcb,EAAAA,GAAAA,QAEhBrF,EAAUA,GAAW,iBAAiBwG,KAAKpE,IAEzC8D,IAAcb,EAAAA,GAAAA,OAEhBrF,EAAUA,KAAaoC,EAAMqC,KAAKgC,MAAM,yBAE5C,CAAC,+BACD,OAAOzG,CACT,EC1BamC,EAA8C,CACzDC,MAAO,GACPE,WAAW,EACXtC,SAAS,GAGEyC,EAAe,SAC1BiE,EACA7D,GAEA,OAAQA,EAAO/B,MACb,KAAKiC,EAAAA,GAAAA,OACH,IAAI4D,EAAS9D,EAAOC,IACpB,OAAO,kBACF4D,GAAK,IACRtE,MAAOuE,EACP3G,QAASiG,EAASU,EAAQ9D,EAAOX,cAGrC,KAAKa,EAAAA,GAAAA,MACH,OAAO,kBAAK2D,GAAK,IAAEpE,WAAW,IAEhC,QACE,OAAOoE,EAGb,EAIapD,EAA4C,CACvDkB,OAAQ,CACNC,KAAMtC,EACNuC,SAAUvC,EACVwC,MAAOxC,GAETnC,SAAS,GAGE2F,EAAc,SACzBe,EACA7D,GAEA,OAAQA,EAAO/B,MACb,KAAKiC,EAAAA,GAAAA,OACHF,EAAOgD,MAAQhD,EAAOgD,MACtB,IAAIe,GAAc,EAClB,IAAK,IAAMd,KAAWY,EAAMlC,OACrBkC,EAAMlC,OAAOsB,KAIhBc,EADEd,IAAYjD,EAAOiD,QACPc,GAAe/D,EAAOgD,MAAM7F,QAGxC4G,GAAgBF,EAAMlC,OAAOsB,GAA+B9F,SAGlE,OAAO,kBACF0G,GAAK,IACRlC,QAAO,kBACFkC,EAAMlC,QAAM,cACd3B,EAAOiD,QAAoB,CAC1B1D,MAAOS,EAAOgD,MAAMzD,MACpBpC,QAAS6C,EAAOgD,MAAM7F,WAG1BA,QAAS4G,IAGb,KAAK7D,EAAAA,GAAAA,IAEH,OADAF,EAAOgD,MAAQhD,EAAOgD,MACf,CAAErB,OAAQ3B,EAAOgD,MAAMrB,OAAQxE,QAAS6C,EAAOgD,MAAM7F,SAE9D,QACE,OAAO0G,EAGb,C,uBCzFO,IAAKrB,EAUAtC,EAMA8D,E,yDARX,SARWxB,GAAAA,EAAAA,EAAc,qBAAdA,EAAAA,EAAc,yBAAdA,EAAAA,EAAc,yBAAdA,EAAAA,EAAc,aAAdA,EAAAA,EAAc,aAAdA,EAAAA,EAAc,iBAAdA,EAAAA,EAAc,eAQzB,CARWA,IAAAA,EAAc,KAczB,SAJWtC,GAAAA,EAAAA,EAAkB,mBAAlBA,EAAAA,EAAkB,iBAAlBA,EAAAA,EAAkB,aAI7B,CAJWA,IAAAA,EAAkB,KAgB7B,SAVW8D,GAAAA,EAAAA,EAAoB,aAApBA,EAAAA,EAAoB,uBAApBA,EAAAA,EAAoB,yBAApBA,EAAAA,EAAoB,6BAApBA,EAAAA,EAAoB,+BAApBA,EAAAA,EAAoB,iCAApBA,EAAAA,EAAoB,2BAApBA,EAAAA,EAAoB,mDAApBA,EAAAA,EAAoB,iDAU/B,CAVWA,IAAAA,EAAoB,I","sources":["FC/shared/components/FormElements/ImageUpload.tsx","FC/shared/components/FormElements/Input.tsx","FC/stocks/pages/NewStock.tsx","hooks/form-hook.tsx","util/validators.tsx","hooks/useReducer.tsx","typing/enums.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Button } from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nexport const ImageUpload = ({\r\n  id,\r\n  center = false,\r\n  onInput,\r\n  errorText,\r\n}: {\r\n  id: string;\r\n  center?: boolean;\r\n  onInput: Function;\r\n  errorText: string;\r\n}) => {\r\n  const ALLOWED_FILES = \".jpg,.png,.jpeg\";\r\n\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [previewUrl, setPreviewUrl] = useState<string | ArrayBuffer | null>(\r\n    null\r\n  );\r\n  const [isValid, setIsValid] = useState(true);\r\n  const filePickerRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let pickedFile: File | null = null;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    onInput(id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current!.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept={ALLOWED_FILES}\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl as string} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n","import { ChangeEvent, useEffect, useReducer } from \"react\";\r\nimport { inputReducer } from \"../../../../hooks/useReducer\";\r\nimport { EReducerActionType, EValidatorType } from \"../../../../typing/enums\";\r\nimport { reducerInputState } from \"../../../../typing/types\";\r\n\r\nimport \"./Input.css\";\r\n\r\nexport function Input({\r\n  id,\r\n  label,\r\n  element,\r\n  type,\r\n  placeHolder,\r\n  rows,\r\n  validators,\r\n  errorText,\r\n  onInput,\r\n  initValue,\r\n  initialIsValid,\r\n}: {\r\n  id?: string;\r\n  label?: string;\r\n  element?: string;\r\n  type?: string;\r\n  placeHolder?: string;\r\n  rows?: number;\r\n  validators: EValidatorType[];\r\n  errorText: string;\r\n  onInput: Function;\r\n  initValue?: string;\r\n  initialIsValid?: boolean;\r\n}) {\r\n  const reducerInputStateInitVal: reducerInputState = {\r\n    value: initValue || \"\",\r\n    isTouched: false,\r\n    isValid: initialIsValid || false,\r\n  };\r\n  const [inputState, dispatch] = useReducer(\r\n    inputReducer,\r\n    reducerInputStateInitVal\r\n  );\r\n\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (\r\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const action = {\r\n      val: event.target.value,\r\n      type: EReducerActionType.CHNAGE,\r\n      validators: validators,\r\n    };\r\n    dispatch(action);\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    const action = {\r\n      val: inputState.value,\r\n      type: EReducerActionType.TOUCH,\r\n      validators: validators,\r\n    };\r\n\r\n    dispatch(action);\r\n  };\r\n\r\n  const currElement =\r\n    element === \"input\" ? (\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        placeholder={placeHolder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value as string}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={id}\r\n        rows={rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value as string}\r\n      />\r\n    );\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={id}>{label}</label>\r\n      {currElement}\r\n      {!inputState.isValid && inputState.isTouched && <p>{errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { AuthContext } from \"../../../hooks/auth-context\";\r\nimport { useForm } from \"../../../hooks/form-hook\";\r\nimport { useHttpClient } from \"../../../hooks/http-hook\";\r\nimport { reducerFormStateInitVal } from \"../../../hooks/useReducer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { EValidatorType } from \"../../../typing/enums\";\r\nimport {\r\n  ERROR_DESCRIPTION_LENGTH,\r\n  ERROR_TEXT_REQUIRED,\r\n  ENDPOINT_STOCKS,\r\n  ERROR_IMAGE,\r\n  ERROR_NUMBER,\r\n} from \"../../../util/Constants\";\r\nimport { Button } from \"../../shared/components/FormElements/Button\";\r\nimport { Input } from \"../../shared/components/FormElements/Input\";\r\nimport { ErrorModal } from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nimport \"./StockForm.css\";\r\nimport { ImageUpload } from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nfunction NewStock() {\r\n  const [formState, inputHandler] = useForm(\r\n    reducerFormStateInitVal.inputs,\r\n    reducerFormStateInitVal.isValid\r\n  );\r\n  const nav = useNavigate();\r\n\r\n  const user = useContext(AuthContext).user!;\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const submitHandler = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (!formState) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"name\", formState.inputs.name!.value);\r\n    formData.append(\"quantity\", formState.inputs.quantity!.value);\r\n    formData.append(\"image\", formState.inputs.image!.value);\r\n\r\n    try {\r\n      await sendRequest(ENDPOINT_STOCKS, \"POST\", formData, {\r\n        Authorization: \"Barer \" + user.token,\r\n      });\r\n\r\n      nav(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"stock-form\" onSubmit={submitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"name\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"name\"\r\n          validators={[EValidatorType.REQUIRE]}\r\n          errorText={ERROR_TEXT_REQUIRED}\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"quantity\"\r\n          element=\"input\"\r\n          label=\"quantity\"\r\n          validators={[EValidatorType.MIN, EValidatorType.MAX]}\r\n          errorText={ERROR_NUMBER}\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText={ERROR_IMAGE}\r\n        />\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          ADD STOCK\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NewStock;\r\n","import { useReducer, useCallback } from \"react\";\r\nimport { EReducerActionType } from \"../typing/enums\";\r\nimport { reducerFormAction, reducerFormState } from \"../typing/types\";\r\nimport { formReducer } from \"./useReducer\";\r\n\r\nexport const useForm = (\r\n  initialInputs: reducerFormState[\"inputs\"],\r\n  initialIsValid: reducerFormState[\"isValid\"]\r\n): [\r\n  reducerFormState,\r\n  (id: string, value: string, isValid: boolean) => void,\r\n  (\r\n    formInputs: reducerFormState[\"inputs\"],\r\n    formIsValid: reducerFormState[\"isValid\"]\r\n  ) => void\r\n] => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialIsValid,\r\n  });\r\n\r\n  const inputHandler = useCallback(\r\n    (id: string, value: string, isValid: boolean) => {\r\n      const action: reducerFormAction = {\r\n        type: EReducerActionType.CHNAGE,\r\n        input: {\r\n          value: value,\r\n          isValid: isValid,\r\n        },\r\n        inputId: id,\r\n      };\r\n      dispatch(action);\r\n    },\r\n    []\r\n  );\r\n\r\n  const setFormData = useCallback(\r\n    (\r\n      formInputs: reducerFormState[\"inputs\"],\r\n      formIsValid: reducerFormState[\"isValid\"]\r\n    ) => {\r\n      const inputs = { inputs: formInputs, isValid: formIsValid };\r\n      const action: reducerFormAction = {\r\n        type: EReducerActionType.SET,\r\n        input: inputs,\r\n      };\r\n      dispatch(action);\r\n    },\r\n    []\r\n  );\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","import { EValidatorType } from \"../typing/enums\";\r\nimport { MINLENGTH, MAXLENGTH, MIN, MAX } from \"./Constants\";\r\n\r\nexport const VALIDATE = (\r\n  value: string | number | File,\r\n  validators: EValidatorType[]\r\n) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator === EValidatorType.REQUIRE) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator === EValidatorType.MINLENGTH) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length >= MINLENGTH;\r\n    }\r\n    if (validator === EValidatorType.MAXLENGTH) {\r\n      value = value as string;\r\n      isValid = isValid && value.trim().length <= MAXLENGTH;\r\n    }\r\n    if (validator === EValidatorType.MIN) {\r\n      isValid = isValid && +value >= MIN;\r\n    }\r\n    if (validator === EValidatorType.MAX) {\r\n      isValid = isValid && +value <= MAX;\r\n    }\r\n    if (validator === EValidatorType.EMAIL) {\r\n      value = value as string;\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n    if (validator === EValidatorType.FILE) {\r\n      value = value as File;\r\n      isValid = isValid && !!value.name.match(/\\.(jpg|jpeg|png|gif)$/);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import { EReducerActionType, EValidatorType } from \"../typing/enums\";\r\nimport {\r\n  reducerInputAction,\r\n  reducerFormState,\r\n  reducerInputState,\r\n  reducerFormAction,\r\n} from \"../typing/types\";\r\nimport { VALIDATE } from \"../util/validators\";\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport const reducerInputStateInitVal: reducerInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n  isValid: false,\r\n};\r\n\r\nexport const inputReducer = (\r\n  state: reducerInputState,\r\n  action: reducerInputAction\r\n) => {\r\n  switch (action.type) {\r\n    case EReducerActionType.CHNAGE: {\r\n      let newVal = action.val;\r\n      return {\r\n        ...state,\r\n        value: newVal,\r\n        isValid: VALIDATE(newVal, action.validators as EValidatorType[]),\r\n      };\r\n    }\r\n    case EReducerActionType.TOUCH: {\r\n      return { ...state, isTouched: true };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/* ************************************************************************************************** */\r\n\r\nexport const reducerFormStateInitVal: reducerFormState = {\r\n  inputs: {\r\n    name: reducerInputStateInitVal,\r\n    quantity: reducerInputStateInitVal,\r\n    image: reducerInputStateInitVal,\r\n  },\r\n  isValid: false,\r\n};\r\n\r\nexport const formReducer = (\r\n  state: reducerFormState,\r\n  action: reducerFormAction\r\n) => {\r\n  switch (action.type) {\r\n    case EReducerActionType.CHNAGE: {\r\n      action.input = action.input as reducerInputState;\r\n      let formIsVlaid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsVlaid = formIsVlaid && action.input.isValid;\r\n        } else {\r\n          formIsVlaid =\r\n            formIsVlaid && (state.inputs[inputId] as reducerInputState).isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId as string]: {\r\n            value: action.input.value,\r\n            isValid: action.input.isValid,\r\n          },\r\n        },\r\n        isValid: formIsVlaid,\r\n      };\r\n    }\r\n    case EReducerActionType.SET: {\r\n      action.input = action.input as reducerFormState;\r\n      return { inputs: action.input.inputs, isValid: action.input.isValid };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","export enum EValidatorType {\r\n  REQUIRE,\r\n  MINLENGTH,\r\n  MAXLENGTH,\r\n  MIN,\r\n  MAX,\r\n  EMAIL,\r\n  FILE,\r\n}\r\n\r\nexport enum EReducerActionType {\r\n  CHNAGE,\r\n  TOUCH,\r\n  SET,\r\n}\r\n\r\nexport enum HTTP_RESPONSE_STATUS {\r\n  OK = 200,\r\n  Created = 201,\r\n  Accepted = 202,\r\n  No_Content = 204,\r\n  Bad_Request = 400,\r\n  Unauthorized = 401,\r\n  Not_Found = 404,\r\n  Internal_Server_Error = 500,\r\n  Unprocessable_Entity = 422,\r\n}\r\n"],"names":["ImageUpload","id","center","onInput","errorText","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","src","alt","Button","onClick","current","click","Input","label","element","placeHolder","rows","validators","reducerInputStateInitVal","value","initValue","isTouched","initialIsValid","useReducer","inputReducer","inputState","dispatch","changeHandler","action","val","EReducerActionType","touchHandler","currElement","placeholder","onBlur","htmlFor","useForm","reducerFormStateInitVal","formState","inputHandler","nav","useNavigate","user","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","submitHandler","preventDefault","formData","FormData","append","inputs","name","quantity","image","ENDPOINT_STOCKS","Authorization","token","ErrorModal","onClear","onSubmit","LoadingSpinner","asOverlay","I","EValidatorType","ERROR_TEXT_REQUIRED","ERROR_NUMBER","ERROR_IMAGE","disabled","initialInputs","formReducer","useCallback","input","inputId","formInputs","formIsValid","VALIDATE","validator","trim","MINLENGTH","MAXLENGTH","MIN","MAX","test","match","state","newVal","formIsVlaid","HTTP_RESPONSE_STATUS"],"sourceRoot":""}